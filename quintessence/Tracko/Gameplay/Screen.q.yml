parent_classes:


  - class: AllegroFlare::Screens::Gameplay
    scope: public
    init_with: ''


properties:


  - name: data_folder_path
    type: std::string
    init_with: DEFAULT_DATA_FOLDER_PATH
    getter: true
    setter: before_initialized

  - name: asset_studio_database
    type: AllegroFlare::AssetStudio::Database*
    init_with: nullptr
    getter_ref: true
    setter: before_initialized

  - name: event_emitter
    type: AllegroFlare::EventEmitter*
    init_with: nullptr
    setter: before_initialized
    getter: true

  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    setter: before_initialized

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    setter: before_initialized

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    setter: before_initialized

  - name: game_configuration
    type: Tracko::GameConfigurations::Main*
    init_with: nullptr
    getter: true
    setter: before_initialized

  - name: current_level_identifier
    type: std::string
    init_with: '"[unset-current_level]"'

  - name: current_level
    type: Tracko::Gameplay::Level*
    init_with: nullptr

  - name: camera
    type: AllegroFlare::Camera2D
    init_with: '{}'

  - name: camera3
    type: AllegroFlare::Camera3D
    init_with: '{}'

  - name: current_board
    type: Tracko::Board*
    init_with: nullptr

  - name: current_board_current_filling_piece
    type: Tracko::Piece*
    init_with: nullptr

  - name: current_board_current_filling_piece_coordinates
    type: AllegroFlare::Int2D
    init_with: '{}'

  - name: game_started
    type: bool
    init_with: false

  - name: current_board_placement
    type: AllegroFlare::Placement2D
    init_with: '{}'

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF
    getter: true
    setter: explicit

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f

  - name: initialized
    type: bool
    init_with: false
    getter: true

  - name: DEFAULT_DATA_FOLDER_PATH
    type: char*
    init_with: '(char*)"[unset-data_folder_path]"'
    static: true
    constexpr: true

  - name: TYPE
    type: char*
    init_with: '(char*)"Tracko/Gameplay/Screen"'
    static: true
    constexpr: true


enums:


  - name: State
    enumerators:
      - STATE_UNDEF
      - STATE_LEVEL_LOADED
      - STATE_REVEALING
      - STATE_PLAYING
      - STATE_LEVEL_WON
      - STATE_LEVEL_LOST
      - STATE_EXITING
      - STATE_EXITED


methods:


  - name: current_level_is_final_level
    type: bool
    body: |
       std::string last_level_identifier = "level_1234";
       return current_level_identifier == last_level_identifier;


  - name: load_level_by_identifier
    virtual: true
    override: true
    parameters:
      - name: level_identifier
        type: std::string
        default_argument: '"[unset-level_identifier]"'
    guards: [ game_configuration ]
    body: |
      // Destroy the current level
      if (current_level)
      {
         // TODO: Shutdown current level
         delete current_level;
      }

      // Set state
      set_state(STATE_LEVEL_LOADED);

      // Reset the camera2D position
      camera.position = { 0, 0 };

      // Reset the camera3D position
      camera3.position = { 0, 0 };
      camera3.stepout = 0;
      camera3.tilt = 0.0;
      camera3.spin = 0.0;

      // Reset the game started counter
      game_started = false;

      // DEVELOPMENT: build random board
      if (current_board) delete current_board;

      if (level_identifier == "level_1")
      {
         current_board = new Tracko::Board;
         current_board->set_start_tile_coordinates({ 0, 2 });
         current_board->set_start_tile_start_connecting_position(Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_LEFT);
         current_board->set_exit_tile_coordinates({ 5, 1 });
         current_board->set_exit_tile_exit_connecting_position(Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_RIGHT);
         current_board->resize(6, 4);
         current_board->fill_with_random_types(2);
         current_board->set_random_tile_with_connection(
               current_board->get_start_tile_coordinates().x,
               current_board->get_start_tile_coordinates().y,
               Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_LEFT,
               3
            );
         current_board->initialize_pieces();
         Tracko::Piece *start_piece = current_board->get_piece(
               current_board->get_start_tile_coordinates().x,
               current_board->get_start_tile_coordinates().y
            );
         start_piece->reveal();
         current_level_identifier = "level_1";
      }
      else if (level_identifier == "level_1234")
      {
         current_board = new Tracko::Board;
         current_board->set_start_tile_coordinates({ 0, 1 });
         current_board->set_start_tile_start_connecting_position(Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_LEFT);
         current_board->set_exit_tile_coordinates({ 6, 3 });
         current_board->set_exit_tile_exit_connecting_position(Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_RIGHT);
         current_board->resize(7, 5);
         current_board->fill_with_random_types(1234);
         current_board->set_random_tile_with_connection(
               current_board->get_start_tile_coordinates().x,
               current_board->get_start_tile_coordinates().y,
               Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_LEFT
            );
         current_board->initialize_pieces();
         Tracko::Piece *start_piece = current_board->get_piece(
               current_board->get_start_tile_coordinates().x,
               current_board->get_start_tile_coordinates().y
            );
         start_piece->reveal();
         current_level_identifier = "level_1234";
      }
      else
      {
         AllegroFlare::Logger::throw_error(
               "Tracko::Gameplay::Screen",
               "Case not found to load level with identifier \"" + level_identifier + "\"."
            );
      }

      /*
      // Load the new level
      AllegroFlare::Levels::Base *loaded_level = game_configuration->load_level_by_identifier(level_identifier);
      if (loaded_level)
      {
         // TODO: Consider how to have this level loading mechanism removed, specifically the dependency on the configuration
         // For now, confirm the type, and cast
         if (!loaded_level->is_type(Tracko::Gameplay::Level::TYPE))
         {
            throw std::runtime_error("Loaded level not of expected type");
         }
         current_level_identifier = level_identifier;
         current_level = static_cast<Tracko::Gameplay::Level*>(loaded_level);
      }
      */
      return;
    body_dependency_symbols:
     - Tracko::GameConfigurations::Main
     - Tracko::Gameplay::Level


  - name: initialize
    guards:
      - (!initialized)
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - event_emitter
      - bitmap_bin
      - font_bin
      - model_bin
    body: |
      set_update_strategy(AllegroFlare::Screens::Base::UpdateStrategy::SEPARATE_UPDATE_AND_RENDER_FUNCS);
      camera.size = { 1920, 1080 };
      initialized = true;
      return;
    body_dependency_symbols:
      - al_is_primitives_addon_initialized


  - name: start_game
    guards: [ (!game_started) ]
    body: |
      game_started = true;
      current_board_current_filling_piece_coordinates = current_board->get_start_tile_coordinates();
      current_board_current_filling_piece =
         current_board->get_piece(
            current_board_current_filling_piece_coordinates.x,
            current_board_current_filling_piece_coordinates.y
         );
      current_board_current_filling_piece->set_entrance_connecting_position(
            current_board->get_start_tile_start_connecting_position()
         );
      set_state(STATE_PLAYING);
      return;


  - name: on_activate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_event_to_update_input_hints_bar();
      //emit_show_and_size_input_hints_bar_event();
      return;


  - name: on_deactivate
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      //emit_hide_and_restore_size_input_hints_bar_event();
      return;


  - name: trigger_level_won
    body: |
       set_state(STATE_LEVEL_WON);


  - name: trigger_level_lost
    body: |
       set_state(STATE_LEVEL_LOST);


  - name: trigger_gameplay_exit
    body: |
       set_state(STATE_EXITING);


  - name: update
    body: |
      update_state();
      if (is_state(STATE_PLAYING)) update_gameplay();
      return;


  - name: update_gameplay
    guards: [ is_state(STATE_PLAYING) ]
    body: |
      double fill_rate = 1.0 / 60.0; // TODO: Use a more reliable time step
      //fill_rate /= 6.0f; // TODO: Use a bpm to sync with music(?)
      if (current_board_current_filling_piece && current_board)
      {
         bool was_filled = false;
         float overflow = 0.0f;
         Tracko::Piece::ConnectingPosition exit_connecting_position =
            Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_UNDEF;
         std::tie(was_filled, overflow, exit_connecting_position) =
            current_board_current_filling_piece->fill_with_amount(fill_rate);

         if (was_filled)
         {
            // TODO: Handle going to next piece
            bool current_piece_is_last_piece = false;

            // TODO: Test this conditional
            if (current_board->get_exit_tile_coordinates().x == current_board_current_filling_piece_coordinates.x
                  && current_board->get_exit_tile_coordinates().y == current_board_current_filling_piece_coordinates.y
                  && exit_connecting_position == current_board->get_exit_tile_exit_connecting_position()
               )
            {
               current_piece_is_last_piece = true;
            }

            if (current_piece_is_last_piece)
            {
               // Level won! Jump to win state
               // TODO: Handle this case
               //throw std::runtime_error("Game won!");
               trigger_level_won();
            }
            else
            {
               Tracko::Piece* connecting_to_piece = nullptr;
               std::pair<int, int> connecting_to_coordinates = { 0, 0 };

               std::tie(connecting_to_piece, connecting_to_coordinates) = current_board->get_connecting_to_piece(
                     current_board_current_filling_piece_coordinates.x,
                     current_board_current_filling_piece_coordinates.y,
                     exit_connecting_position
                  );

               bool current_connecting_piece_connects_to_next = (connecting_to_piece != nullptr);

               if (!current_connecting_piece_connects_to_next)
               {
                  // Lost game! Jump to you lose state
                  // TODO: Handle this case
                  //throw std::runtime_error("Game lost!");
                  trigger_level_lost();
               }
               else
               {
                  // TODO: Test this section

                  // Get the new entrance position
                  Tracko::Piece::ConnectingPosition entrance_connecting_position =
                     current_board->get_inverse_connection_position(exit_connecting_position);

                  // These variables are not properly assigned
                  current_board_current_filling_piece_coordinates =
                     { connecting_to_coordinates.first, connecting_to_coordinates.second };
                  current_board_current_filling_piece =
                     current_board->get_piece(
                        current_board_current_filling_piece_coordinates.x,
                        current_board_current_filling_piece_coordinates.y
                     );
                  current_board_current_filling_piece->set_entrance_connecting_position(
                        entrance_connecting_position
                     );
               }
            }
         }
      }
      return;


  - name: render
    body: |
      //
      // Draw world
      //

      Tracko::BoardRenderer board_renderer(bitmap_bin, font_bin, model_bin, current_board);
      current_board_placement.size = { board_renderer.infer_width(), board_renderer.infer_height() }; // ??
      current_board_placement.scale = { 0.0075, -0.0075 };

      // Draw the board
      camera3.tilt = -0.6;
      //camera3.stepout += 0.1;
      camera3.stepout = AllegroFlare::Vec3D(0, -0.1, 10);
      camera3.zoom = 2.0;
      camera3.setup_projection_on(al_get_target_bitmap()); // ???
      //AllegroFlare::Model3D *model = model_bin->auto_get("centered_unit_cube-02.obj");
      //ALLEGRO_BITMAP *texture = bitmap_bin->auto_get("tiles_4x3-01-horizontal-01.png");
      //AllegroFlare::Model3D *model = model_bin->auto_get("tiles_4x3-01-horizontal-01.obj");
      //AllegroFlare::Placement3D piece_placement;
      //float scale = 0.25;
      //piece_placement.scale = { scale, scale, scale };
      //piece_placement.rotation += { 0.25, 0.0, 0.0 };
      //model->set_texture(texture);

      //piece_placement.start_transform();
      //model->draw();
      //piece_placement.restore_transform();
      //camera3.start_reverse_transform();
      // camera.start_reverse_transform();
      current_board_placement.start_transform();
      board_renderer.render();
      //board_renderer.render_models();
      current_board_placement.restore_transform();
      //camera.restore_transform();
      //camera3.restore_transform();

      //
      // Draw hud
      //

      // Draw the swap piece
      camera.setup_dimensional_projection(al_get_target_bitmap());
      camera.start_reverse_transform();
      AllegroFlare::Placement2D swap_piece_placement;
      swap_piece_placement.position = { -1920 / 2 + 100, 1080 / 2 - 100 }; //320, 1080 - 200 };

      Tracko::PieceRenderer piece_renderer;
      piece_renderer.set_font_bin(font_bin);
      piece_renderer.set_bitmap_bin(bitmap_bin);
      piece_renderer.set_model_bin(model_bin);
      piece_renderer.set_piece(current_board->get_swap_piece());
      swap_piece_placement.size = { piece_renderer.get_width(), piece_renderer.get_height() };

      swap_piece_placement.start_transform();
      piece_renderer.render();
      swap_piece_placement.restore_transform();
      camera.restore_transform();

      // Draw banners based on state:

      if (is_state(STATE_LEVEL_WON))
      {
         ALLEGRO_FONT *font = obtain_banner_font();
         al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 1920/2, 1080/2 - 220, ALLEGRO_ALIGN_CENTER, "Game Won");
         al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 1920/2, 1080/2, ALLEGRO_ALIGN_CENTER, "Press ENTER");
      }
      else if (is_state(STATE_LEVEL_LOST))
      {
         ALLEGRO_FONT *font = obtain_banner_font();
         al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 1920/2, 1080/2 - 220, ALLEGRO_ALIGN_CENTER, "Game Lost");
         al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 1920/2, 1080/2, ALLEGRO_ALIGN_CENTER, "Press ENTER");
      }

      //ALLEGRO_FONT *font = obtain_font();
      //al_draw_text(font, ALLEGRO_COLOR{1, 1, 1, 1}, 1920/2, 1080/2 - 30, ALLEGRO_ALIGN_CENTER, "Hello");

      return;
    body_dependency_symbols:
      - AllegroFlare::Placement3D
      - Tracko::BoardRenderer
      - Tracko::PieceRenderer


  - name: game_event_func
    virtual: true
    override: true
    parameters:
      - name: game_event
        type: AllegroFlare::GameEvent*
        default_argument: nullptr
    guards: [ game_event ]
    body: |
      // game_configuration->handle_game_event(game_event);
      return;


  - name: primary_update_func
    virtual: true
    override: true
    parameters:
      - name: time_now
        type: double
        default_argument: 0.0f
      - name: delta_time
        type: double
        default_argument: 1.0f
    guards: [ initialized ]
    body: |
      // Update stuff here (take into account delta_time)
      update();
      return;


  - name: primary_render_func
    virtual: true
    override: true
    guards: [ initialized ]
    body: |
      // Render stuff here
      render();
      return;


  - name: perform_primary_board_action
    body: |
      Tracko::Piece *piece_at_cursor = current_board->get_piece_at_cursor();

      if (piece_at_cursor->infer_can_reveal())
      {
         piece_at_cursor->reveal();
      }
      else if (current_board->can_swap())
      {
         current_board->swap();
      }
      return;


  - name: key_char_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ ev ]
    body: |
      bool in_playing_state = is_state(STATE_REVEALING) || is_state(STATE_PLAYING);
      bool in_win_or_loss_state = is_state(STATE_LEVEL_WON) || is_state(STATE_LEVEL_LOST);

      if (in_playing_state)
      {
         switch (ev->keyboard.keycode)
         {
            case ALLEGRO_KEY_UP:
               current_board->move_cursor_up();
            break;

            case ALLEGRO_KEY_DOWN:
               current_board->move_cursor_down();
            break;

            case ALLEGRO_KEY_LEFT:
               current_board->move_cursor_left();
            break;

            case ALLEGRO_KEY_RIGHT:
               current_board->move_cursor_right();
            break;

            case ALLEGRO_KEY_ENTER:
               perform_primary_board_action();
            break;

            case ALLEGRO_KEY_SPACE:
               if (!game_started) start_game();
            break;
         }
      }
      else if (in_win_or_loss_state)
      {
         switch (ev->keyboard.keycode)
         {
            case ALLEGRO_KEY_ENTER:
               trigger_gameplay_exit();
            break;
         }
      }

      return;


  - name: virtual_control_button_up_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: virtual_control_button_down_func
    virtual: true
    override: true
    parameters:
      - name: player
        type: AllegroFlare::Player*
        default_argument: nullptr
      - name: virtual_controller
        type: AllegroFlare::VirtualControllers::Base*
        default_argument: nullptr
      - name: virtual_controller_button_num
        type: int
        default_argument: 0
      - name: is_repeat
        type: bool
        default_argument: false
    guards: [ initialized ]
    body: |
      // TODO: this function
      using namespace AllegroFlare;
      //if (!is_processing_user_input()) return;

      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_RIGHT)
      {
         //player_velocity.x = 1;
         //chapter_select_element.rotate_carousel_right();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_LEFT)
      {
         //player_velocity.x = -1;
         //chapter_select_element.rotate_carousel_left();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_A
         || virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_MENU
         )
      {
         //select_menu_option();
      }
      if (virtual_controller_button_num == VirtualControllers::GenericController::BUTTON_X)
      {
         //exit_screen();
      }
      //call_on_finished_callback_func(); // Consider technique to exit
      return;
    body_dependency_symbols:
      - AllegroFlare::VirtualControllers::GenericController


  - name: virtual_control_axis_change_func
    virtual: true
    override: true
    parameters:
      - name: ev
        type: ALLEGRO_EVENT*
        default_argument: nullptr
    guards: [ initialized ]
    body: |
      // TODO: this function
      return;


  - name: set_state
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;

      switch (state)
      {
         case STATE_LEVEL_LOADED:
         break;

         case STATE_REVEALING:
         break;

         case STATE_PLAYING:
         break;

         case STATE_LEVEL_WON:
         break;

         case STATE_LEVEL_LOST:
         break;

         case STATE_EXITING:
         break;

         case STATE_EXITED:
         break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::set_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      this->state = state;
      state_changed_at = al_get_time();

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: update_state
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    guards: [ is_valid_state(state) ]
    body: |
      float age = infer_current_state_age(time_now);

      switch (state)
      {
         case STATE_LEVEL_LOADED:
         break;

         case STATE_REVEALING:
         break;

         case STATE_PLAYING:
         break;

         case STATE_LEVEL_WON:
         break;

         case STATE_LEVEL_LOST:
         break;

         case STATE_EXITING:
            if (age > 2.0)
            {
               set_state(STATE_EXITED);
               call_on_finished_callback_func();
            }
         break;

         case STATE_EXITED:
         break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::update_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         STATE_LEVEL_LOADED,
         STATE_REVEALING,
         STATE_PLAYING,
         STATE_LEVEL_WON,
         STATE_LEVEL_LOST,
         STATE_EXITING,
         STATE_EXITED
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
    body: |
      return (time_now - state_changed_at);


  - name: obtain_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Regular.ttf -32");


  - name: obtain_banner_font
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Oswald-Medium.ttf -200");


dependencies:


  - symbol: Tracko::ForwardDeclarations::Tracko::GameConfigurations::Main
    headers: [ Tracko/ForwardDeclarations/Tracko/GameConfigurations/Main.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro.h ]
  - symbol: ALLEGRO_EVENT
    headers: [ allegro5/allegro.h ]
  - symbol: AllegroFlare::Screens::Gameplay
    headers: [ AllegroFlare/Screens/Gameplay.hpp ]
  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::EventEmitter
    headers: [ AllegroFlare/EventEmitter.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]
  - symbol: al_is_primitives_addon_initialized
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Player
    headers: [ AllegroFlare/Player.hpp ]
  - symbol: AllegroFlare::VirtualControllers::Base
    headers: [ AllegroFlare/VirtualControllers/Base.hpp ]
  - symbol: AllegroFlare::VirtualControllers::GenericController
    headers: [ AllegroFlare/VirtualControllers/GenericController.hpp ]
  - symbol: Tracko::GameConfigurations::Main
    headers: [ Tracko/GameConfigurations/Main.hpp ]
  - symbol: Tracko::Gameplay::Screen
    headers: [ Tracko/Gameplay/Screen.hpp ]
  - symbol: Tracko::Gameplay::Level
    headers: [ Tracko/Gameplay/Level.hpp ]
  - symbol: AllegroFlare::GameEvent
    headers: [ AllegroFlare/GameEvent.hpp ]
  - symbol: AllegroFlare::AssetStudio::Database
    headers: [ AllegroFlare/AssetStudio/Database.hpp ]
  - symbol: AllegroFlare::Placement3D
    headers: [ AllegroFlare/Placement3D.hpp ]
  - symbol: Tracko::BoardRenderer
    headers: [ Tracko/BoardRenderer.hpp ]
  - symbol: AllegroFlare::Camera2D
    headers: [ AllegroFlare/Camera2D.hpp ]
  - symbol: AllegroFlare::Camera3D
    headers: [ AllegroFlare/Camera3D.hpp ]
  - symbol: Tracko::Board
    headers: [ Tracko/Board.hpp ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: Tracko::PieceRenderer
    headers: [ Tracko/PieceRenderer.hpp ]
  - symbol: AllegroFlare::Int2D
    headers: [ AllegroFlare/Int2D.hpp ]
  - symbol: Tracko::Piece::ConnectingPosition
    headers: [ Tracko/Piece.hpp ]
  - symbol: Tracko::Piece
    headers: [ Tracko/Piece.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]


