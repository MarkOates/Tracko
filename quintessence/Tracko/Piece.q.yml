properties:


  - name: fill_counter
    type: float
    init_with: 0.0f
    getter: true
    setter: false

  - name: tile_type
    type: uint32_t
    init_with: TILE_TYPE_UNDEF
    getter: true
    setter: explicit

  - name: entrance_connecting_position
    type: uint32_t
    init_with: CONNECTING_POSITION_UNDEF
    getter: true
    setter: explicit

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF
    getter: true
    setter: explicit

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f


enums:


  - name: TileType
    enumerators:
      - TILE_TYPE_UNDEF
      - TILE_TYPE_HORIZONTAL_BAR
      - TILE_TYPE_VERTICAL_BAR
      - TILE_TYPE_TOP_RIGHT_CURVE
      - TILE_TYPE_RIGHT_BOTTOM_CURVE
      - TILE_TYPE_BOTTOM_LEFT_CURVE
      - TILE_TYPE_LEFT_TOP_CURVE


  - name: ConnectingPosition
    enumerators:
      - CONNECTING_POSITION_UNDEF
      - CONNECTING_POSITION_LEFT
      - CONNECTING_POSITION_TOP
      - CONNECTING_POSITION_RIGHT
      - CONNECTING_POSITION_BOTTOM


  - name: State
    enumerators:
      - STATE_UNDEF
      - STATE_HIDDEN
      - STATE_REVEALED
      - STATE_FILLING
      - STATE_FILLED


methods:


  - name: set_tile_type
    parameters:
      - name: tile_type
        type: Tracko::Piece::TileType
        default_argument: TILE_TYPE_UNDEF
    guards: [ (tile_type != TILE_TYPE_UNDEF), (is_state(STATE_UNDEF) || is_state(STATE_HIDDEN)) ]
    body: |
      this->tile_type = tile_type;
      return;


  - name: set_entrance_connecting_position
    parameters:
      - name: entrance_connecting_position
        type: Tracko::Piece::ConnectingPosition
        default_argument: CONNECTING_POSITION_UNDEF
    guards:
      - (entrance_connecting_position != CONNECTING_POSITION_UNDEF)
      - (is_state(STATE_UNDEF) || is_state(STATE_HIDDEN))
    body: |
      this->entrance_connecting_position = entrance_connecting_position;
      return;


  - name: infer_exit_connecting_position
    type: Tracko::Piece::ConnectingPosition
    body: |
      std::map<TileType, std::pair<ConnectingPosition, ConnectingPosition>> connection_edges = {
         { TILE_TYPE_HORIZONTAL_BAR, { CONNECTING_POSITION_LEFT, CONNECTING_POSITION_RIGHT } },
         { TILE_TYPE_VERTICAL_BAR, { CONNECTING_POSITION_TOP, CONNECTING_POSITION_BOTTOM } },
         // TODO: Add more connections here
      };


      //TILE_TYPE_VERTICAL_BAR
      //TILE_TYPE_TOP_RIGHT_CURVE
      //TILE_TYPE_RIGHT_BOTTOM_CURVE
      //TILE_TYPE_BOTTOM_LEFT_CURVE
      //TILE_TYPE_LEFT_TOP_CURVE
      //this->entrance_connecting_position = entrance_connecting_position;
      return CONNECTING_POSITION_UNDEF;
    body_dependency_symbols:
      - std::map
      - std::pair


  - name: is_filled
    type: bool
    body: |
      return is_state(STATE_FILLED);


  - name: fill_with_amount
    type: std::pair<bool, float>
    parameters:
      - name: amount
        type: float
        default_argument: 0.025f
    guards: [ (!is_filled()) ]
    body: |
      float remainder = 0.0f;
      bool was_filled = false;

      fill_counter += amount;
      if (fill_counter >= 1.0) 
      {
         remainder = (fill_counter - 1.0);
         was_filled = true;

         set_state(STATE_FILLED);
         fill_counter = 1.0f;
      }
      return { was_filled, remainder };


  - name: set_state
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ al_is_system_installed(), is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;

      switch (state)
      {
         case STATE_HIDDEN:
         break;

         case STATE_REVEALED:
         break;

         case STATE_FILLING:
         break;

         case STATE_FILLED:
         break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::set_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      this->state = state;
      state_changed_at = al_get_time();

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - al_get_time


  - name: update_state
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
        default_argument_dependency_symbols: [ al_get_time ]
    guards: [ is_valid_state(state) ]
    body: |
      float age = infer_current_state_age(time_now);

      switch (state)
      {
         case STATE_HIDDEN:
         break;

         case STATE_REVEALED:
         break;

         case STATE_FILLING:
         break;

         case STATE_FILLED:
         break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::update_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         STATE_HIDDEN,
         STATE_REVEALED,
         STATE_FILLING,
         STATE_FILLED,
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
        default_argument_dependency_symbols: [ al_get_time ]
    body: |
      return (time_now - state_changed_at);


dependencies:


  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: al_get_time
    headers: [ allegro5/allegro.h ]
  - symbol: Tracko::Piece::TileType
    headers: [ Tracko/Piece.hpp ]
  - symbol: Tracko::Piece::ConnectingPosition
    headers: [ Tracko/Piece.hpp ]


