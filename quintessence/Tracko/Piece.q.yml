properties:


  - name: fill_counter
    type: float
    init_with: 0.0f
    getter: true
    setter: false

  - name: tile_type
    type: Tracko::Piece::TileType
    init_with: TILE_TYPE_UNDEF
    getter: true
    setter: explicit

  - name: entrance_connecting_position
    type: Tracko::Piece::ConnectingPosition
    init_with: CONNECTING_POSITION_UNDEF
    getter: true
    setter: explicit

  - name: path
    type: AllegroFlare::Path2D
    init_with: ''
    getter: true
    getter_ref: true
    setter: false

  - name: state
    type: uint32_t
    init_with: STATE_UNDEF
    getter: true
    setter: explicit

  - name: state_is_busy
    type: bool
    init_with: false

  - name: state_changed_at
    type: float
    init_with: 0.0f

  - name: initialized
    type: bool
    init_with: false
    getter: true
    setter: false


enums:


  - name: TileType
    scope: public
    enumerators:
      - TILE_TYPE_UNDEF
      - TILE_TYPE_HORIZONTAL_BAR
      - TILE_TYPE_VERTICAL_BAR
      - TILE_TYPE_TOP_RIGHT_CURVE
      - TILE_TYPE_RIGHT_BOTTOM_CURVE
      - TILE_TYPE_BOTTOM_LEFT_CURVE
      - TILE_TYPE_LEFT_TOP_CURVE


  - name: ConnectingPosition
    scope: public
    enumerators:
      - CONNECTING_POSITION_UNDEF
      - CONNECTING_POSITION_LEFT
      - CONNECTING_POSITION_TOP
      - CONNECTING_POSITION_RIGHT
      - CONNECTING_POSITION_BOTTOM


  - name: State
    scope: public
    enumerators:
      - STATE_UNDEF
      - STATE_HIDDEN
      - STATE_REVEALED
      - STATE_FILLING
      - STATE_FILLED


methods:


  - name: initialize
    guards:
      - (!initialized)
      - (tile_type != TILE_TYPE_UNDEF)
    body: |
      Tracko::Visuals::TrackPath::build_points_for_tile_type(tile_type);
      std::vector<AllegroFlare::Vec2D> points = Tracko::Visuals::TrackPath::build_points_for_tile_type(tile_type);
      path.point = points;
      path.refresh_segment_info();

      initialized = true;
      set_state(STATE_HIDDEN);
      return;
    body_dependency_symbols:
      - Tracko::Visuals::TrackPath


  - name: get_path_pos
    type: std::pair<bool, AllegroFlare::Vec2D>
    body: |
      if (!is_state(STATE_FILLING)) return { false, { 0, 0 } };

      bool entrance_reverses_path = infer_entrance_reverses_path(tile_type, entrance_connecting_position);

      double denormalized_distance = (entrance_reverses_path ? fill_counter : 1.0 - fill_counter) * path.length();
      return { true, path.coordinate_at(denormalized_distance) };


  - name: infer_entrance_reverses_path
    type: bool
    static: true
    parameters:
      - name: tile_type
        type: Tracko::Piece::TileType
        default_argument: TILE_TYPE_UNDEF
      - name: entrance_connecting_position
        type: Tracko::Piece::ConnectingPosition
        default_argument: CONNECTING_POSITION_UNDEF
    guards:
      - (tile_type != TILE_TYPE_UNDEF)
      - (entrance_connecting_position != CONNECTING_POSITION_UNDEF)
    body: |
      std::set<std::pair<TileType, ConnectingPosition>> backward_path_tile_type_entrance_connecting_positions = {
         { TILE_TYPE_HORIZONTAL_BAR, CONNECTING_POSITION_LEFT },
         { TILE_TYPE_VERTICAL_BAR, CONNECTING_POSITION_BOTTOM },
         { TILE_TYPE_TOP_RIGHT_CURVE, CONNECTING_POSITION_RIGHT },
         { TILE_TYPE_RIGHT_BOTTOM_CURVE, CONNECTING_POSITION_BOTTOM },
         { TILE_TYPE_BOTTOM_LEFT_CURVE, CONNECTING_POSITION_LEFT },
         { TILE_TYPE_LEFT_TOP_CURVE, CONNECTING_POSITION_TOP },
      };

      auto &map = backward_path_tile_type_entrance_connecting_positions;

      std::pair<TileType, ConnectingPosition> tile_type_entrance_connecting_position_to_check(
            tile_type,
            entrance_connecting_position
         );

      return map.find(tile_type_entrance_connecting_position_to_check) != map.end();


  - name: infer_can_swap
    type: bool
    body: |
      // TODO: Test this
      std::set<uint32_t> swapable_states =
      {
         STATE_UNDEF,
         STATE_HIDDEN,
         STATE_REVEALED,
         //STATE_FILLING,
         //STATE_FILLED,
      };
      return (swapable_states.count(state) > 0);


  - name: infer_can_fill
    type: bool
    body: |
      // TODO: Test this
      std::set<uint32_t> fillable_states =
      {
         //STATE_UNDEF,
         //STATE_HIDDEN,
         STATE_REVEALED,
         STATE_FILLING,
         //STATE_FILLED,
      };
      return (fillable_states.count(state) > 0);


  - name: infer_can_reveal
    type: bool
    body: |
      // TODO: Test this
      std::set<uint32_t> revealable_states =
      {
         //STATE_UNDEF,
         STATE_HIDDEN,
         //STATE_REVEALED,
         //STATE_FILLING,
         //STATE_FILLED,
      };
      return (revealable_states.count(state) > 0);


  - name: infer_is_available_for_connection
    type: bool
    body: |
      // TODO: Test this
      std::set<uint32_t> fillable_states =
      {
         //STATE_UNDEF,
         //STATE_HIDDEN,
         STATE_REVEALED,
         //STATE_FILLING,
         //STATE_FILLED,
      };
      return (fillable_states.count(state) > 0);


  - name: has_connecting_position
    type: bool
    parameters:
      - name: connecting_position
        type: Tracko::Piece::ConnectingPosition
        default_argument: CONNECTING_POSITION_UNDEF
    guards: [ (tile_type != TILE_TYPE_UNDEF) ]
    body: |
      // TODO: Test this
      std::map<TileType, std::pair<ConnectingPosition, ConnectingPosition>> piece_connection_edges = {
         { TILE_TYPE_HORIZONTAL_BAR, { CONNECTING_POSITION_LEFT, CONNECTING_POSITION_RIGHT } },
         { TILE_TYPE_VERTICAL_BAR, { CONNECTING_POSITION_TOP, CONNECTING_POSITION_BOTTOM } },
         { TILE_TYPE_TOP_RIGHT_CURVE, { CONNECTING_POSITION_TOP, CONNECTING_POSITION_RIGHT } },
         { TILE_TYPE_RIGHT_BOTTOM_CURVE, { CONNECTING_POSITION_RIGHT, CONNECTING_POSITION_BOTTOM } },
         { TILE_TYPE_BOTTOM_LEFT_CURVE, { CONNECTING_POSITION_BOTTOM, CONNECTING_POSITION_LEFT } },
         { TILE_TYPE_LEFT_TOP_CURVE, { CONNECTING_POSITION_LEFT, CONNECTING_POSITION_TOP } },
      };
      if (piece_connection_edges.find(tile_type) == piece_connection_edges.end())
      {
         AllegroFlare::Logger::throw_error(
            "Tracko::Piece::has_connecting_position",
            "Unable to handle case for the tile_type \""
               + std::to_string(tile_type) + "\""
         );
      }
      std::pair<ConnectingPosition, ConnectingPosition> connecting_positions = piece_connection_edges[tile_type];
      return (connecting_positions.first == connecting_position || connecting_positions.second == connecting_position);


  - name: reveal
    guards: [ infer_can_reveal() ]
    body: |
      set_state(STATE_REVEALED);


  - name: is_hidden
    type: bool
    body: |
      return is_state(STATE_HIDDEN);


  - name: set_tile_type
    parameters:
      - name: tile_type
        type: Tracko::Piece::TileType
        default_argument: TILE_TYPE_UNDEF
    guards: [ (tile_type != TILE_TYPE_UNDEF), (is_state(STATE_UNDEF) || is_state(STATE_HIDDEN)) ]
    body: |
      this->tile_type = tile_type;
      return;


  - name: set_entrance_connecting_position
    parameters:
      - name: entrance_connecting_position
        type: Tracko::Piece::ConnectingPosition
        default_argument: CONNECTING_POSITION_UNDEF
    guards:
      - (entrance_connecting_position != CONNECTING_POSITION_UNDEF)
      - is_state(STATE_REVEALED)
    body: |
      this->entrance_connecting_position = entrance_connecting_position;
      return;


  - name: get_connecting_positions
    static: true
    type: std::pair<Tracko::Piece::ConnectingPosition, Tracko::Piece::ConnectingPosition>
    parameters:
      - name: tile_type
        type: Tracko::Piece::TileType
        default_argument: TILE_TYPE_UNDEF
    body: |
      // TODO: Test this
      std::map<TileType, std::pair<ConnectingPosition, ConnectingPosition>> piece_connection_edges = {
         { TILE_TYPE_HORIZONTAL_BAR, { CONNECTING_POSITION_LEFT, CONNECTING_POSITION_RIGHT } },
         { TILE_TYPE_VERTICAL_BAR, { CONNECTING_POSITION_TOP, CONNECTING_POSITION_BOTTOM } },
         { TILE_TYPE_TOP_RIGHT_CURVE, { CONNECTING_POSITION_TOP, CONNECTING_POSITION_RIGHT } },
         { TILE_TYPE_RIGHT_BOTTOM_CURVE, { CONNECTING_POSITION_RIGHT, CONNECTING_POSITION_BOTTOM } },
         { TILE_TYPE_BOTTOM_LEFT_CURVE, { CONNECTING_POSITION_BOTTOM, CONNECTING_POSITION_LEFT } },
         { TILE_TYPE_LEFT_TOP_CURVE, { CONNECTING_POSITION_LEFT, CONNECTING_POSITION_TOP } },
      };

      // Lookup the connections on this piece type
      if (piece_connection_edges.find(tile_type) == piece_connection_edges.end())
      {
         AllegroFlare::Logger::throw_error(
            "Tracko::Piece::get_connecting_positions",
            "Unable to handle case for the tile_type \""
               + std::to_string(tile_type) + "\""
         );
      }
      std::pair<ConnectingPosition, ConnectingPosition> connecting_positions = piece_connection_edges[tile_type];

      return connecting_positions;
    body_dependency_symbols:
      - std::map
      - std::pair


  - name: get_types_with_connecting_position
    static: true
    type: std::vector<Tracko::Piece::TileType>
    parameters:
      - name: connecting_position
        type: Tracko::Piece::ConnectingPosition
        default_argument: CONNECTING_POSITION_UNDEF
    guards: [ (connecting_position != CONNECTING_POSITION_UNDEF) ]
    body: |
      // TODO: Test this
      std::map<TileType, std::pair<ConnectingPosition, ConnectingPosition>> piece_connection_edges = {
         { TILE_TYPE_HORIZONTAL_BAR, { CONNECTING_POSITION_LEFT, CONNECTING_POSITION_RIGHT } },
         { TILE_TYPE_VERTICAL_BAR, { CONNECTING_POSITION_TOP, CONNECTING_POSITION_BOTTOM } },
         { TILE_TYPE_TOP_RIGHT_CURVE, { CONNECTING_POSITION_TOP, CONNECTING_POSITION_RIGHT } },
         { TILE_TYPE_RIGHT_BOTTOM_CURVE, { CONNECTING_POSITION_RIGHT, CONNECTING_POSITION_BOTTOM } },
         { TILE_TYPE_BOTTOM_LEFT_CURVE, { CONNECTING_POSITION_BOTTOM, CONNECTING_POSITION_LEFT } },
         { TILE_TYPE_LEFT_TOP_CURVE, { CONNECTING_POSITION_LEFT, CONNECTING_POSITION_TOP } },
      };

      // Lookup the types on this connection type
      std::vector<TileType> types_with_connecting_position;

      for (auto &piece_connection_edge : piece_connection_edges)
      {
         if (piece_connection_edge.second.first == connecting_position || 
             piece_connection_edge.second.second == connecting_position)
         {
            types_with_connecting_position.push_back(piece_connection_edge.first);
         }
      }

      return types_with_connecting_position;
    body_dependency_symbols:
      - std::map
      - std::pair


  - name: infer_exit_connecting_position
    type: Tracko::Piece::ConnectingPosition
    body: |
      std::pair<ConnectingPosition, ConnectingPosition> connections_on_this_piece = get_connecting_positions(tile_type);

      // Find the "other" connecting piece, given the entrance connecting position
      Tracko::Piece::ConnectingPosition inferred_exit_position = CONNECTING_POSITION_UNDEF;
      if (connections_on_this_piece.first == entrance_connecting_position)
      {
         inferred_exit_position = connections_on_this_piece.second;
      }
      else if (connections_on_this_piece.second == entrance_connecting_position)
      {
         inferred_exit_position = connections_on_this_piece.first;
      }

      if (inferred_exit_position == CONNECTING_POSITION_UNDEF)
      {
         AllegroFlare::Logger::throw_error(
            "Tracko::Piece::infer_exit_connection_position",
            "When looking at the connection pieces for this piece type \"" + std::to_string(tile_type) + "\", there "
               "was no connecting edge that matched the \"entrance_connecting_position\" of \""
               + std::to_string(entrance_connecting_position) + "\""
         );
      }

      return inferred_exit_position;
    body_dependency_symbols:
      - std::map
      - std::pair


  - name: is_filled
    type: bool
    body: |
      return is_state(STATE_FILLED);


  - name: is_partially_filled
    type: bool
    body: |
      return is_state(STATE_FILLING);


  - name: fill_with_amount
    type: std::tuple<bool, float, Tracko::Piece::ConnectingPosition>
    parameters:
      - name: amount
        type: float
        default_argument: 0.025f
    guards: [ (is_state(STATE_REVEALED) || is_state(STATE_FILLING)) ]
    body: |
      if (is_state(STATE_REVEALED)) set_state(STATE_FILLING);

      float remainder = 0.0f;
      bool was_filled = false;
      Tracko::Piece::ConnectingPosition exit_connecting_position =
         Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_UNDEF;

      fill_counter += amount;
      if (fill_counter >= 1.0) 
      {
         remainder = (fill_counter - 1.0);
         was_filled = true;
         exit_connecting_position = infer_exit_connecting_position();

         set_state(STATE_FILLED);
         fill_counter = 1.0f;
      }

      return { was_filled, remainder, exit_connecting_position };


  - name: set_state
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
      - name: override_if_busy
        type: bool
        default_argument: false
    guards: [ al_is_system_installed(), is_valid_state(state) ]
    body: |
      if (this->state == state) return;
      if (!override_if_busy && state_is_busy) return;
      uint32_t previous_state = this->state;

      switch (state)
      {
         case STATE_HIDDEN:
         break;

         case STATE_REVEALED:
         break;

         case STATE_FILLING:
         break;

         case STATE_FILLED:
         break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::set_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      this->state = state;
      state_changed_at = al_get_time();

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger
      - al_get_time


  - name: update_state
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
        default_argument_dependency_symbols: [ al_get_time ]
    guards: [ is_valid_state(state) ]
    body: |
      float age = infer_current_state_age(time_now);

      switch (state)
      {
         case STATE_HIDDEN:
         break;

         case STATE_REVEALED:
         break;

         case STATE_FILLING:
         break;

         case STATE_FILLED:
         break;

         default:
            AllegroFlare::Logger::throw_error(
               "ClassName::update_state",
               "Unable to handle case for state \"" + std::to_string(state) + "\""
            );
         break;
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Logger


  - name: is_valid_state
    type: bool
    static: true
    parameters:
      - name: state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
      std::set<uint32_t> valid_states =
      {
         STATE_HIDDEN,
         STATE_REVEALED,
         STATE_FILLING,
         STATE_FILLED,
      };
      return (valid_states.count(state) > 0);
    body_dependency_symbols:
      - std::set


  - name: is_state
    type: bool
    parameters:
      - name: possible_state
        type: uint32_t
        default_argument: STATE_UNDEF
    body: |
     return (state == possible_state);


  - name: infer_current_state_age
    type: float
    parameters:
      - name: time_now
        type: float
        default_argument: al_get_time()
        default_argument_dependency_symbols: [ al_get_time ]
    body: |
      return (time_now - state_changed_at);


dependencies:


  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: al_get_time
    headers: [ allegro5/allegro.h ]
  - symbol: Tracko::Piece::TileType
    headers: [ Tracko/Piece.hpp ]
  - symbol: Tracko::Piece::ConnectingPosition
    headers: [ Tracko/Piece.hpp ]
  - symbol: Tracko::Visuals::TrackPath
    headers: [ Tracko/Visuals/TrackPath.hpp ]
  - symbol: AllegroFlare::Path2D
    headers: [ AllegroFlare/Path2D.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]


