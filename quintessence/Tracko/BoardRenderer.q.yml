properties:


  - name: bitmap_bin
    type: AllegroFlare::BitmapBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: model_bin
    type: AllegroFlare::ModelBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: board
    type: Tracko::Board*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: column_width
    type: float
    init_with: 120.0f
    getter: true
    setter: true

  - name: row_height
    type: float
    init_with: 120.0f
    getter: true
    setter: true


methods:


  - name: infer_width
    type: float
    guards: [ board ]
    body: |
      return board->get_num_columns() * column_width;


  - name: infer_height
    type: float
    guards: [ board ]
    body: |
      return board->get_num_rows() * row_height;


  - name: render_models
    type: void
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - font_bin
      - board
    body: |
      int num_rows = board->get_num_rows();
      int num_columns = board->get_num_columns();

      // Draw the 3D pieces
      if (model_bin && bitmap_bin)
      {
         AllegroFlare::Placement3D piece_placement_3d;
         for (int x=0; x<num_columns; x++)
         {
            for (int y=0; y<num_rows; y++)
            {
               Tracko::Piece* piece = board->get_piece(x, y);
               float center_x = x * column_width + column_width * 0.5;
               float center_y = y * row_height + row_height * 0.5;

               Tracko::PieceRenderer piece_renderer;//(font_bin, model_bin, piece);
               piece_renderer.set_bitmap_bin(bitmap_bin);
               piece_renderer.set_font_bin(font_bin);
               piece_renderer.set_model_bin(model_bin);
               piece_renderer.set_piece(piece);

               float scale = 0.25;
               //piece_placement.scale = { scale, scale, scale };
               piece_placement_3d.rotation += { 0.25, 0.0, 0.0 };

               piece_placement_3d.position = { center_x, center_y };
               //piece_placement_3d.size = { piece_renderer.get_width(), piece_renderer.get_height() };
               //piece_placement_3d.scale = { 0.3f, 0.3f, 0.3f };
               piece_placement_3d.start_transform();
               piece_renderer.render();
               piece_placement_3d.restore_transform();
            }
         }
      }
      return;


  - name: render
    type: void
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - font_bin
      - board
    body: |
      int num_rows = board->get_num_rows();
      int num_columns = board->get_num_columns();
      ALLEGRO_COLOR grid_color = ALLEGRO_COLOR{0.2, 0.21, 0.22, 0.22};

      // Draw the empty board lines
      bool draw_board_grid_lines_and_cell_points = false;
      if (draw_board_grid_lines_and_cell_points)
      {
         for (int column=0; column<num_columns; column++)
         {
            for (int row=0; row<num_rows; row++)
            {
               float x1 = column * column_width;
               float y1 = row * row_height;
               float x2 = column * column_width + column_width;
               float y2 = row * row_height + row_height;
               float center_x = x1 + column_width * 0.5;
               float center_y = y1 + row_height * 0.5;
               al_draw_filled_circle(center_x, center_y, 4, grid_color);
               al_draw_rectangle(x1, y1, x2, y2, grid_color, 1.0);
            }
         }
      }

      // Draw the actual pieces
      AllegroFlare::Placement2D piece_placement;
      for (int x=0; x<num_columns; x++)
      {
         for (int y=0; y<num_rows; y++)
         {
            Tracko::Piece* piece = board->get_piece(x, y);
            float center_x = x * column_width + column_width * 0.5;
            float center_y = y * row_height + row_height * 0.5;

            Tracko::PieceRenderer piece_renderer;//(font_bin, model_bin, piece);
            piece_renderer.set_bitmap_bin(bitmap_bin);
            piece_renderer.set_font_bin(font_bin);
            //piece_renderer.set_model_bin(model_bin);
            piece_renderer.set_piece(piece);

            piece_placement.position = { center_x, center_y };
            piece_placement.size = { piece_renderer.get_width(), piece_renderer.get_height() };
            piece_placement.start_transform();
            piece_renderer.render();
            piece_placement.restore_transform();
         }
      }

      // Draw the entrance
      AllegroFlare::Int2D start_tile_coordinates = board->get_start_tile_coordinates();
      Tracko::Piece::ConnectingPosition start_tile_start_connecting_position = 
         board->get_start_tile_start_connecting_position();
      AllegroFlare::Vec2D start_tile_connecting_delta =
         Tracko::PieceRenderer::get_connecting_coords(start_tile_start_connecting_position);
      float entrance_tile_center_x = start_tile_coordinates.x * column_width + column_width * 0.5;
      float entrance_tile_center_y = start_tile_coordinates.y * row_height + row_height * 0.5;
      AllegroFlare::Vec2D start_tile_connecting_offset = start_tile_connecting_delta * row_height * 0.5;
      float start_tile_entrance_x = entrance_tile_center_x + start_tile_connecting_offset.x;
      float start_tile_entrance_y = entrance_tile_center_y + start_tile_connecting_offset.y;
      al_draw_filled_circle(start_tile_entrance_x, start_tile_entrance_y, 9, al_color_name("aliceblue"));

      // Draw the exit
      AllegroFlare::Int2D exit_tile_coordinates = board->get_exit_tile_coordinates();
      Tracko::Piece::ConnectingPosition exit_tile_exit_connecting_position = 
         board->get_exit_tile_exit_connecting_position();
      AllegroFlare::Vec2D exit_tile_connecting_delta =
         Tracko::PieceRenderer::get_connecting_coords(exit_tile_exit_connecting_position);
      float exit_tile_center_x = exit_tile_coordinates.x * column_width + column_width * 0.5;
      float exit_tile_center_y = exit_tile_coordinates.y * row_height + row_height * 0.5;
      AllegroFlare::Vec2D exit_tile_connecting_offset = exit_tile_connecting_delta * row_height * 0.5;
      float exit_tile_exit_x = exit_tile_center_x + exit_tile_connecting_offset.x;
      float exit_tile_exit_y = exit_tile_center_y + exit_tile_connecting_offset.y;
      al_draw_filled_circle(exit_tile_exit_x, exit_tile_exit_y, 9, al_color_name("aliceblue"));

      // Draw the position of the cursor
      float cursor_column = board->get_cursor_x();
      float cursor_row = board->get_cursor_y();
      float x1 = cursor_column * column_width;
      float y1 = cursor_row * row_height;
      float x2 = cursor_column * column_width + column_width;
      float y2 = cursor_row * row_height + row_height;
      float center_x = x1 + column_width * 0.5;
      float center_y = y1 + row_height * 0.5;
      al_draw_rectangle(x1, y1, x2, y2, al_color_name("dodgerblue"), 7.0);

      return;
    body_dependency_symbols:
      - AllegroFlare::Vec2D
      - AllegroFlare::Placement2D
      - AllegroFlare::Placement3D
      - al_draw_rounded_rectangle
      - al_draw_rectangle
      - al_draw_circle
      - al_color_name
      - al_draw_text
      - Tracko::PieceRenderer


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -52");


dependencies:


  - symbol: AllegroFlare::BitmapBin
    headers: [ AllegroFlare/BitmapBin.hpp ]
  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_color_name
    headers: [ allegro5/allegro_color.h ]
  - symbol: al_draw_circle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Placement2D
    headers: [ AllegroFlare/Placement2D.hpp ]
  - symbol: AllegroFlare::Placement3D
    headers: [ AllegroFlare/Placement3D.hpp ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: Tracko::Board
    headers: [ Tracko/Board.hpp ]
  - symbol: Tracko::PieceRenderer
    headers: [ Tracko/PieceRenderer.hpp ]
  - symbol: AllegroFlare::ModelBin
    headers: [ AllegroFlare/ModelBin.hpp ]


