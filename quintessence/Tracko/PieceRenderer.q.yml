properties:


  - name: font_bin
    type: AllegroFlare::FontBin*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: piece
    type: Tracko::Piece*
    init_with: nullptr
    constructor_arg: true
    getter: true
    setter: true

  - name: width
    type: float
    init_with: 120.0f
    getter: true
    setter: true

  - name: height
    type: float
    init_with: 120.0f
    getter: true
    setter: true


methods:


  - name: render
    guards:
      - al_is_system_installed()
      - al_is_primitives_addon_initialized()
      - al_is_font_addon_initialized()
      - font_bin
      - piece
      - piece->get_initialized()
    body: |
      std::string quote = "piece";
      // float x = 1920/2;
      // float y = 1080/3;
      ALLEGRO_FONT *font = obtain_font();
      //float text_width = al_get_text_width(font, quote.c_str());
      //float text_height = al_get_font_line_height(font);
      //float h_text_width = width;
      //float h_text_height = height;
      AllegroFlare::Vec2D padding = {30, 20};

      // Draw the connection points
      float center_x = width * 0.5;
      float center_y = height * 0.5;
      float dist = width * 0.5 * 0.6;

      if (piece->is_hidden())
      {
         // Draw hidden appearance
         al_draw_rounded_rectangle(
            4,
            4,
            width-4,
            height-4,
            8.0f,
            8.0f,
            ALLEGRO_COLOR{0.2, 0.21, 0.22, 0.22},
            4.0f
         );

         int font_line_height = al_get_font_line_height(font);
         al_draw_text(font, ALLEGRO_COLOR{0.4, 0.4, 0.2, 0.4}, center_x, center_y-font_line_height * 0.5f,
            ALLEGRO_ALIGN_CENTER, "?");
      }
      else
      {
         // Draw revealed appearance
         al_draw_rounded_rectangle(
            4,
            4,
            width-4,
            height-4,
            8.0f,
            8.0f,
            ALLEGRO_COLOR{1, 1, 1, 1},
            4.0f
         );

         // Draw connection points
         if (piece->get_tile_type() != Tracko::Piece::TILE_TYPE_UNDEF)
         {
            // DEVELOPMENT: Draw connection points
            std::pair<AllegroFlare::Vec2D, AllegroFlare::Vec2D> connection_coords =
               get_connecting_coords_for_type(piece->get_tile_type());

            std::vector<AllegroFlare::Vec2D> connection_coords_vec = { connection_coords.first, connection_coords.second };

            for (auto &connection_coord : connection_coords_vec)
            {
               float x = center_x + connection_coord.x * dist;
               float y = center_y + connection_coord.y * dist;
               al_draw_filled_circle(x, y, 8, ALLEGRO_COLOR{ 0.3, 0.4, 0.3, 0.4 });
            }
         }
      }

      // Draw some tile type undefined warning
      if (piece->get_tile_type() == Tracko::Piece::TILE_TYPE_UNDEF)
      {
         int font_line_height = al_get_font_line_height(font);
         al_draw_text(font, ALLEGRO_COLOR{1, 1, 0.5, 1}, center_x, center_y-font_line_height * 0.5f, ALLEGRO_ALIGN_CENTER,
            "undefined type");
      }

      return;
    body_dependency_symbols:
      - AllegroFlare::Vec2D
      - al_draw_rounded_rectangle
      - al_draw_text


  - name: get_connecting_coords_for_type
    type: std::pair<AllegroFlare::Vec2D, AllegroFlare::Vec2D>
    static: true
    parameters:
      - name: tile_type
        type: Tracko::Piece::TileType
        default_argument: Tracko::Piece::TILE_TYPE_UNDEF
    body: |
      std::pair<Tracko::Piece::ConnectingPosition, Tracko::Piece::ConnectingPosition> connecting_positions =
         Tracko::Piece::get_connecting_positions(tile_type);
      return { get_connecting_coords(connecting_positions.first), get_connecting_coords(connecting_positions.second) };


  - name: get_connecting_coords
    type: AllegroFlare::Vec2D
    static: true
    parameters:
      - name: connecting_position
        type: Tracko::Piece::ConnectingPosition
        default_argument: Tracko::Piece::CONNECTING_POSITION_UNDEF
    body: |
      std::map<Tracko::Piece::ConnectingPosition, AllegroFlare::Vec2D> connecting_position_coords = {
         { Tracko::Piece::CONNECTING_POSITION_LEFT, { -1.0, 0.0 } },
         { Tracko::Piece::CONNECTING_POSITION_TOP, { 0.0, -1.0 } },
         { Tracko::Piece::CONNECTING_POSITION_RIGHT, { 1.0, 0.0 } },
         { Tracko::Piece::CONNECTING_POSITION_BOTTOM, { 0.0, 1.0 } },
      };

      if (connecting_position_coords.find(connecting_position) == connecting_position_coords.end())
      {
         AllegroFlare::Logger::throw_error(
            "Tracko::PieceRenderer::get_connecting_coors",
            "Unable to handle case for the Tracko::Piece::ConnectingPosition \""
               + std::to_string(connecting_position) + "\""
         );
      }
      AllegroFlare::Vec2D connecting_coords = connecting_position_coords[connecting_position];

      return connecting_coords;
    body_dependency_symbols:
      - std::map
      - AllegroFlare::Logger


  - name: obtain_font
    private: true
    type: ALLEGRO_FONT*
    guards: [ font_bin ]
    body: |
      return font_bin->auto_get("Inter-Medium.ttf -52");


dependencies:


  - symbol: AllegroFlare::FontBin
    headers: [ AllegroFlare/FontBin.hpp ]
  - symbol: ALLEGRO_FONT
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_text
    headers: [ allegro5/allegro_font.h ]
  - symbol: al_draw_rounded_rectangle
    headers: [ allegro5/allegro_primitives.h ]
  - symbol: AllegroFlare::Vec2D
    headers: [ AllegroFlare/Vec2D.hpp ]
  - symbol: Tracko::Piece
    headers: [ Tracko/Piece.hpp ]
  - symbol: Tracko::Piece::ConnectingPosition
    headers: [ Tracko/Piece.hpp ]
  - symbol: AllegroFlare::Logger
    headers: [ AllegroFlare/Logger.hpp ]
  - symbol: Tracko::Piece::TileType
    headers: [ Tracko/Piece.hpp ]


