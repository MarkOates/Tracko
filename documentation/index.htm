<!DOCTYPE html>
<head>
<style>
html
{
  background-color: #09090c;
  color: #dfdfdf;
}
*
{
  font-family: 'Arial';
  padding: 3px 20px;
}
table td
{
  padding: 3px 20px;
}
.property
{
  color: dodgerblue;
}
.private_property
{
  color: aliceblue;
}

.method
{
  color: orange;
}

.private_method
{
  color: pink;
}

.dependency
{
  color: #9f9fa1;
}

.component
{
  padding: 20 10 20 10;
  margin: 20 10 20 10;
  background-color: #1a1a1c;
}

.component h3
{
}
</style>
</head>
<body>
<h1>Table of Contents</h1>
<ul>
  <li><a href="#quintessence/Tracko/Board.q.yml">quintessence/Tracko/Board.q.yml</a></li>
  <li><a href="#quintessence/Tracko/BoardFactory.q.yml">quintessence/Tracko/BoardFactory.q.yml</a></li>
  <li><a href="#quintessence/Tracko/BoardRenderer.q.yml">quintessence/Tracko/BoardRenderer.q.yml</a></li>
  <li><a href="#quintessence/Tracko/GameConfigurations/Main.q.yml">quintessence/Tracko/GameConfigurations/Main.q.yml</a></li>
  <li><a href="#quintessence/Tracko/GameProgressAndStateInfo.q.yml">quintessence/Tracko/GameProgressAndStateInfo.q.yml</a></li>
  <li><a href="#quintessence/Tracko/Gameplay/Level.q.yml">quintessence/Tracko/Gameplay/Level.q.yml</a></li>
  <li><a href="#quintessence/Tracko/Gameplay/Screen.q.yml">quintessence/Tracko/Gameplay/Screen.q.yml</a></li>
  <li><a href="#quintessence/Tracko/Piece.q.yml">quintessence/Tracko/Piece.q.yml</a></li>
  <li><a href="#quintessence/Tracko/PieceRenderer.q.yml">quintessence/Tracko/PieceRenderer.q.yml</a></li>
  <li><a href="#quintessence/Tracko/SharedBackground.q.yml">quintessence/Tracko/SharedBackground.q.yml</a></li>
  <li><a href="#quintessence/Tracko/SharedForeground.q.yml">quintessence/Tracko/SharedForeground.q.yml</a></li>
  <li><a href="#quintessence/Tracko/Visuals/TrackPath.q.yml">quintessence/Tracko/Visuals/TrackPath.q.yml</a></li>
</ul>
<h1>Components</h1>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/Board.q.yml">quintessence/Tracko/Board.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">pieces</td>
  <td class="property">std::vector&lt;std::vector&lt;Tracko::Piece&gt;&gt;</td>
</tr>
<tr>
  <td class="property">swap_piece</td>
  <td class="property">Tracko::Piece</td>
</tr>
<tr>
  <td class="property">num_rows</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">num_columns</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">start_tile_coordinates</td>
  <td class="property">AllegroFlare::Int2D</td>
</tr>
<tr>
  <td class="property">start_tile_start_connecting_position</td>
  <td class="property">Tracko::Piece::ConnectingPosition</td>
</tr>
<tr>
  <td class="property">exit_tile_coordinates</td>
  <td class="property">AllegroFlare::Int2D</td>
</tr>
<tr>
  <td class="property">exit_tile_exit_connecting_position</td>
  <td class="property">Tracko::Piece::ConnectingPosition</td>
</tr>
<tr>
  <td class="property">update_rate_denominator</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">cursor_x</td>
  <td class="property">int</td>
</tr>
<tr>
  <td class="property">cursor_y</td>
  <td class="property">int</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_up</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_down</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_left</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>move_cursor_right</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>swap</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>can_swap</b>()</td>
</tr>
<tr>
  <td class="method">std::pair&lt;bool, std::pair&lt;int, int&gt;&gt;</td>
  <td class="method"><b>calculate_adjacency</b>(int x1=0, int y1=0, int x2=0, int y2=0)</td>
</tr>
<tr>
  <td class="method">Tracko::Piece::ConnectingPosition</td>
  <td class="method"><b>get_inverse_connection_position</b>(Tracko::Piece::ConnectingPosition connection_position=Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_UNDEF)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;Tracko::Piece*, std::pair&lt;int, int&gt;&gt;</td>
  <td class="method"><b>get_connecting_to_piece</b>(int from_piece_x=0, int from_piece_y=0, Tracko::Piece::ConnectingPosition exiting_connection_position=Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>have_connecting_edges</b>(int x1=0, int y1=0, int x2=0, int y2=0)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>cursor_is_in_valid_position</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>resize</b>(int num_columns=8, int num_rows=8)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>fill_with_random_types</b>(uint32_t seed=76414 /*TRAIN*/, bool always_random=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_random_tile_with_connection</b>(int x=0, int y=0, Tracko::Piece::ConnectingPosition connecting_position=Tracko::Piece::CONNECTING_POSITION_UNDEF, uint32_t seed=76414 /*TRAIN*/)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize_pieces</b>()</td>
</tr>
<tr>
  <td class="method">Tracko::Piece*</td>
  <td class="method"><b>get_piece_at_cursor</b>()</td>
</tr>
<tr>
  <td class="method">Tracko::Piece*</td>
  <td class="method"><b>get_piece</b>(int x=8, int y=8)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_tile_coordinate</b>(int x=8, int y=8)</td>
</tr>
<tr>
  <td class="method">Tracko::Piece*</td>
  <td class="method"><b>get_swap_piece</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Random&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Random.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece::ConnectingPosition&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Int2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Int2D.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/BoardFactory.q.yml">quintessence/Tracko/BoardFactory.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<p>This class contains no properties</p>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">Tracko::Board*</td>
  <td class="method"><b>create_board_by_identifier</b>(std::string board_identifier=&quot;[unset-board_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">Tracko::Board*</td>
  <td class="method"><b>create_board</b>(int num_columns=6, int num_rows=4, AllegroFlare::Int2D start_coordinate={ 0, 2 }, Tracko::Piece::ConnectingPosition start_connecting_position=Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_LEFT, AllegroFlare::Int2D end_coordinate={ 5, 1 }, Tracko::Piece::ConnectingPosition end_connecting_position=Tracko::Piece::ConnectingPosition::CONNECTING_POSITION_RIGHT, float update_rate_denominator=8.0f, int seed=0)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Board&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Board.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Int2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Int2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece::ConnectingPosition&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/BoardRenderer.q.yml">quintessence/Tracko/BoardRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">board</td>
  <td class="property">Tracko::Board*</td>
</tr>
<tr>
  <td class="property">column_width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">row_height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_width</b>()</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_height</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_models</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_circle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Board&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Board.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::PieceRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/PieceRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/GameConfigurations/Main.q.yml">quintessence/Tracko/GameConfigurations/Main.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">primary_gameplay_screen</td>
  <td class="property">Tracko::Gameplay::Screen*</td>
</tr>
<tr>
  <td class="property">primary_gameplay_subscreen</td>
  <td class="property">AllegroFlare::Screens::Subscreen::Screen*</td>
</tr>
<tr>
  <td class="property">pause_screen</td>
  <td class="property">AllegroFlare::Screens::PauseScreen*</td>
</tr>
<tr>
  <td class="property">shared_background</td>
  <td class="property">Tracko::SharedBackground*</td>
</tr>
<tr>
  <td class="property">shared_foreground</td>
  <td class="property">Tracko::SharedForeground*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>app_title</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>title_screen_title</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::tuple&lt;std::string, AllegroFlare::Achievement*, bool, bool&gt;&gt;</td>
  <td class="method"><b>build_achievements</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::Backgrounds::Base*</td>
  <td class="method"><b>create_shared_background</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Elements::Backgrounds::Base*</td>
  <td class="method"><b>create_shared_foreground</b>()</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Gameplay*</td>
  <td class="method"><b>create_primary_gameplay_screen</b>(AllegroFlare::Runners::Complete* runner=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_primary_gameplay_screen_finished</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>before_activate_screen_callback</b>(std::string screen_identifier_that_will_activate=&quot;[unset-screen_identifier_that_will_activate]&quot;, std::string currently_active_screen_identifier=&quot;[unset-currently_active_screen_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::Subscreen::Screen*</td>
  <td class="method"><b>create_primary_gameplay_subscreen</b>(AllegroFlare::Runners::Complete* runner=nullptr)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Screens::PauseScreen*</td>
  <td class="method"><b>create_pause_screen</b>(AllegroFlare::Runners::Complete* runner=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_intro_logos_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Elements::StoryboardPages::Base *&gt;</td>
  <td class="method"><b>create_intro_storyboard_pages</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_title_screen_menu_options</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_audio_controller</b>(AllegroFlare::AudioController* audio_controller=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_last_played_session_or_start_new</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>setup_new_game_progress_and_state_info</b>(AllegroFlare::GameSession* game_session=nullptr)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::LoadASavedGame::SaveSlots::Base*&gt;</td>
  <td class="method"><b>build_save_slots_for_load_a_saved_game_screen</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>handle_game_event</b>(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>continue_from_last_save</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;std::pair&lt;std::string, std::string&gt;&gt;</td>
  <td class="method"><b>build_level_list_for_level_select_screen_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::DialogTree::NodeBank</td>
  <td class="method"><b>build_dialog_bank_by_identifier</b>(std::string identifier=&quot;[identifier-discarded]&quot;)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Levels::Base*</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string identifier=&quot;[unset-identifier]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameConfigurations::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameConfigurations/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Levels::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Levels/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBank&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBank.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeBankFactory&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeBankFactory.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::Wait&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/Wait.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::ExitProgram&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/ExitProgram.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::Nodes::MultipageWithOptions&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/Nodes/MultipageWithOptions.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::GoToNode&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/GoToNode.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::DialogTree::NodeOptions::ExitDialog&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/DialogTree/NodeOptions/ExitDialog.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Gameplay::Level&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Gameplay/Level.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Achievement&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Achievement.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::StoryboardPages::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/StoryboardPages/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameSession&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameSession.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameProgressAndStateInfos::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameProgressAndStateInfos/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::LoadASavedGame::SaveSlots::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/LoadASavedGame/SaveSlots/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Runners::Complete&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Runners/Complete.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AudioController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AudioController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventNames&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventNames.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEventDatas::AchievementUnlocked&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEventDatas/AchievementUnlocked.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::PauseScreen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/PauseScreen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Subscreen::Screen&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Subscreen/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::ForwardDeclarations::Tracko::GameConfigurations::Main&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/ForwardDeclarations/Tracko/GameConfigurations/Main.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::ForwardDeclarations::Tracko::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/ForwardDeclarations/Tracko/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::SharedBackground&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/SharedBackground.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::SharedForeground&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/SharedForeground.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/GameProgressAndStateInfo.q.yml">quintessence/Tracko/GameProgressAndStateInfo.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">player_inventory_items</td>
  <td class="property">std::vector&lt;std::string&gt;</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>add_player_inventory_item</b>(std::string item_identifier=&quot;[unset-item_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>export_to_string</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>import_from_string</b>(std::string data_string=&quot;[unset-data_string]&quot;)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameProgressAndStateInfos::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameProgressAndStateInfos/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::JSONLoaders::Tracko::GameProgressAndStateInfo&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/JSONLoaders/Tracko/GameProgressAndStateInfo.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/Gameplay/Level.q.yml">quintessence/Tracko/Gameplay/Level.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">title</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Levels::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Levels/Base.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/Gameplay/Screen.q.yml">quintessence/Tracko/Gameplay/Screen.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">data_folder_path</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">asset_studio_database</td>
  <td class="property">AllegroFlare::AssetStudio::Database*</td>
</tr>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">game_configuration</td>
  <td class="property">Tracko::GameConfigurations::Main*</td>
</tr>
<tr>
  <td class="property">current_level_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">current_level</td>
  <td class="property">Tracko::Gameplay::Level*</td>
</tr>
<tr>
  <td class="property">camera</td>
  <td class="property">AllegroFlare::Camera2D</td>
</tr>
<tr>
  <td class="property">camera3</td>
  <td class="property">AllegroFlare::Camera3D</td>
</tr>
<tr>
  <td class="property">current_board</td>
  <td class="property">Tracko::Board*</td>
</tr>
<tr>
  <td class="property">current_board_current_filling_piece</td>
  <td class="property">Tracko::Piece*</td>
</tr>
<tr>
  <td class="property">current_board_current_filling_piece_coordinates</td>
  <td class="property">AllegroFlare::Int2D</td>
</tr>
<tr>
  <td class="property">game_started</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">level_won</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">fast_train_mode_activated</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">current_board_placement</td>
  <td class="property">AllegroFlare::Placement2D</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">DEFAULT_DATA_FOLDER_PATH</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>current_level_is_final_level</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>load_level_by_identifier</b>(std::string level_identifier=&quot;[unset-level_identifier]&quot;)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>start_game</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>on_deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>trigger_level_won</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>trigger_level_lost</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>trigger_gameplay_exit</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_gameplay</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>game_event_func</b>(AllegroFlare::GameEvent* game_event=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_update_func</b>(double time_now=0.0f, double delta_time=1.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>primary_render_func</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>perform_primary_board_action</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate_fast_train_mode</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>key_char_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_up_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_button_down_func</b>(AllegroFlare::Player* player=nullptr, AllegroFlare::VirtualControllers::Base* virtual_controller=nullptr, int virtual_controller_button_num=0, bool is_repeat=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>virtual_control_axis_change_func</b>(ALLEGRO_EVENT* ev=nullptr)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_state</b>(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_state</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_state</b>(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_state</b>(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_current_state_age</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_font</b>()</td>
</tr>
<tr>
  <td class="method">ALLEGRO_FONT*</td>
  <td class="method"><b>obtain_banner_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::ForwardDeclarations::Tracko::GameConfigurations::Main&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/ForwardDeclarations/Tracko/GameConfigurations/Main.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_EVENT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Screens::Gameplay&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Screens/Gameplay.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Player&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Player.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::VirtualControllers::GenericController&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/VirtualControllers/GenericController.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::GameConfigurations::Main&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/GameConfigurations/Main.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Gameplay::Screen&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Gameplay/Screen.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Gameplay::Level&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Gameplay/Level.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::GameEvent&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/GameEvent.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::AssetStudio::Database&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/AssetStudio/Database.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::BoardRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/BoardRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Camera3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Camera3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Board&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Board.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::PieceRenderer&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/PieceRenderer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Int2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Int2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece::ConnectingPosition&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::BoardFactory&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/BoardFactory.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/Piece.q.yml">quintessence/Tracko/Piece.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">fill_counter</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">tile_type</td>
  <td class="property">Tracko::Piece::TileType</td>
</tr>
<tr>
  <td class="property">entrance_connecting_position</td>
  <td class="property">Tracko::Piece::ConnectingPosition</td>
</tr>
<tr>
  <td class="property">state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_can_swap</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_can_fill</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_can_reveal</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>infer_is_available_for_connection</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>has_connecting_position</b>(Tracko::Piece::ConnectingPosition connecting_position=CONNECTING_POSITION_UNDEF)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reveal</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_hidden</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_tile_type</b>(Tracko::Piece::TileType tile_type=TILE_TYPE_UNDEF)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_entrance_connecting_position</b>(Tracko::Piece::ConnectingPosition entrance_connecting_position=CONNECTING_POSITION_UNDEF)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;Tracko::Piece::ConnectingPosition, Tracko::Piece::ConnectingPosition&gt;</td>
  <td class="method"><b>get_connecting_positions</b>(Tracko::Piece::TileType tile_type=TILE_TYPE_UNDEF)</td>
</tr>
<tr>
  <td class="method">std::vector&lt;Tracko::Piece::TileType&gt;</td>
  <td class="method"><b>get_types_with_connecting_position</b>(Tracko::Piece::ConnectingPosition connecting_position=CONNECTING_POSITION_UNDEF)</td>
</tr>
<tr>
  <td class="method">Tracko::Piece::ConnectingPosition</td>
  <td class="method"><b>infer_exit_connecting_position</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_filled</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_partially_filled</b>()</td>
</tr>
<tr>
  <td class="method">std::tuple&lt;bool, float, Tracko::Piece::ConnectingPosition&gt;</td>
  <td class="method"><b>fill_with_amount</b>(float amount=0.025f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_state</b>(uint32_t state=STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update_state</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_state</b>(uint32_t state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_state</b>(uint32_t possible_state=STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_current_state_age</b>(float time_now=al_get_time())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_get_time&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece::TileType&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece::ConnectingPosition&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/PieceRenderer.q.yml">quintessence/Tracko/PieceRenderer.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">model_bin</td>
  <td class="property">AllegroFlare::ModelBin*</td>
</tr>
<tr>
  <td class="property">piece</td>
  <td class="property">Tracko::Piece*</td>
</tr>
<tr>
  <td class="property">width</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">height</td>
  <td class="property">float</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_model_identifier_for_type</b>(Tracko::Piece::TileType tile_type=Tracko::Piece::TILE_TYPE_UNDEF)</td>
</tr>
<tr>
  <td class="method">std::string</td>
  <td class="method"><b>get_bitmap_identifier_for_type</b>(Tracko::Piece::TileType tile_type=Tracko::Piece::TILE_TYPE_UNDEF)</td>
</tr>
<tr>
  <td class="method">std::pair&lt;AllegroFlare::Vec2D, AllegroFlare::Vec2D&gt;</td>
  <td class="method"><b>get_connecting_coords_for_type</b>(Tracko::Piece::TileType tile_type=Tracko::Piece::TILE_TYPE_UNDEF)</td>
</tr>
<tr>
  <td class="method">AllegroFlare::Vec2D</td>
  <td class="method"><b>get_connecting_coords</b>(Tracko::Piece::ConnectingPosition connecting_position=Tracko::Piece::CONNECTING_POSITION_UNDEF)</td>
</tr>
<tr>
  <td class="private_method">ALLEGRO_FONT*</td>
  <td class="private_method"><b>obtain_font</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_name&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece::ConnectingPosition&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece::TileType&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Model3D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Model3D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Placement2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Placement2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::ModelBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/ModelBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/SharedBackground.q.yml">quintessence/Tracko/SharedBackground.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">using_clear_color</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">clear_color</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
<tr>
  <td class="property">using_parallax</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">parallax</td>
  <td class="property">AllegroFlare::Elements::Backgrounds::Parallax</td>
</tr>
<tr>
  <td class="property">using_fill_image</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">fill_image_identifier</td>
  <td class="property">std::string</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">DEFAULT_CLEAR_COLOR</td>
  <td class="property">ALLEGRO_COLOR</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>clear_all_usings</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_parallax_offset</b>(float offset_x=0.0f, float offset_y=0.0f)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>set_parallax_layers</b>(std::vector&lt;AllegroFlare::Elements::Backgrounds::ParallaxLayer&gt; parallax_layers={})</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>swap_to_title</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>swap_to_level_select</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>swap_to_unknown</b>()</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_color_html&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_color.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Parallax&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Parallax.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::ParallaxLayer&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/ParallaxLayer.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Shaders::ColorAdjust&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Shaders/ColorAdjust.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/SharedForeground.q.yml">quintessence/Tracko/SharedForeground.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">event_emitter</td>
  <td class="property">AllegroFlare::EventEmitter*</td>
</tr>
<tr>
  <td class="property">bitmap_bin</td>
  <td class="property">AllegroFlare::BitmapBin*</td>
</tr>
<tr>
  <td class="property">font_bin</td>
  <td class="property">AllegroFlare::FontBin*</td>
</tr>
<tr>
  <td class="property">curtain_position</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">curtain_state</td>
  <td class="property">uint32_t</td>
</tr>
<tr>
  <td class="property">curtain_state_is_busy</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">curtain_state_changed_at</td>
  <td class="property">float</td>
</tr>
<tr>
  <td class="property">initialized</td>
  <td class="property">bool</td>
</tr>
<tr>
  <td class="property">CURTAIN_OPENED_GAME_EVENT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">CURTAIN_CLOSED_GAME_EVENT_NAME</td>
  <td class="property">char*</td>
</tr>
<tr>
  <td class="property">TYPE</td>
  <td class="property">char*</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>initialize</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>open_curtain</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>close_curtain</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>curtain_is_open</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>curtain_is_closed</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>activate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>deactivate</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>update</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_curtains</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>show</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>hide</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>set_curtain_state</b>(uint32_t curtain_state=CURTAIN_STATE_UNDEF, bool override_if_busy=false)</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>update_curtain_state</b>(float time_now=al_get_time())</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_curtain_opened_event</b>()</td>
</tr>
<tr>
  <td class="private_method">void</td>
  <td class="private_method"><b>emit_curtain_closed_event</b>()</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_valid_curtain_state</b>(uint32_t curtain_state=CURTAIN_STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">bool</td>
  <td class="method"><b>is_curtain_state</b>(uint32_t possible_curtain_state=CURTAIN_STATE_UNDEF)</td>
</tr>
<tr>
  <td class="method">float</td>
  <td class="method"><b>infer_current_curtain_state_age</b>(float time_now=al_get_time())</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_font_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_is_primitives_addon_initialized&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_filled_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_COLOR&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Elements::Backgrounds::Base&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Elements/Backgrounds/Base.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::BitmapBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/BitmapBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::EventEmitter&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/EventEmitter.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<br><br><br>
<br><br><br>
<ul>
  <div class="component">
    <h3 id="quintessence/Tracko/Visuals/TrackPath.q.yml">quintessence/Tracko/Visuals/TrackPath.q.yml</h3>
    <p>(This component does not include supplementary documentation)</p>
    <h3>Properties</h3>
<div class="property-box properties">     <table>
<tr>
  <td class="property">path</td>
  <td class="property">AllegroFlare::Path2D</td>
</tr>
    </table>
</div>    <h3>Methods</h3>
<div class="property-box methods">     <table>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render</b>()</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>reverse_points</b>()</td>
</tr>
<tr>
  <td class="method">std::vector&lt;AllegroFlare::Vec2D&gt;</td>
  <td class="method"><b>build_points_for_tile_type</b>(Tracko::Piece::TileType tile_type=Tracko::Piece::TileType::TILE_TYPE_UNDEF)</td>
</tr>
<tr>
  <td class="method">void</td>
  <td class="method"><b>render_point_at</b>(float position=0.0f)</td>
</tr>
    </table>
</div>    <h3>Dependencies</h3>
<div class="property-box dependencies">     <table>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::FontBin&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/FontBin.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;ALLEGRO_FONT&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_text&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_font.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;al_draw_rounded_rectangle&quot;, &quot;headers&quot;=&gt;[&quot;allegro5/allegro_primitives.h&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Vec2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Vec2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Path2D&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Path2D.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;Tracko::Piece::TileType&quot;, &quot;headers&quot;=&gt;[&quot;Tracko/Piece.hpp&quot;]}</td>
</tr>
<tr>
  <td class="dependency">{&quot;symbol&quot;=&gt;&quot;AllegroFlare::Logger&quot;, &quot;headers&quot;=&gt;[&quot;AllegroFlare/Logger.hpp&quot;]}</td>
</tr>
    </table>
</div>  </div>
</ul>
<h1>Dependents</h1>
<pre>
{
  "Tracko/Piece": [
    "Tracko/Board",
    "Tracko/Gameplay/Screen",
    "Tracko/PieceRenderer"
  ],
  "AllegroFlare/Random": [
    "Tracko/Board"
  ],
  "Tracko/Piece/ConnectingPosition": [
    "Tracko/Board",
    "Tracko/BoardFactory",
    "Tracko/Gameplay/Screen",
    "Tracko/Piece",
    "Tracko/PieceRenderer"
  ],
  "AllegroFlare/Logger": [
    "Tracko/Board",
    "Tracko/Gameplay/Screen",
    "Tracko/Piece",
    "Tracko/PieceRenderer",
    "Tracko/Visuals/TrackPath"
  ],
  "AllegroFlare/Int2D": [
    "Tracko/Board",
    "Tracko/BoardFactory",
    "Tracko/Gameplay/Screen"
  ],
  "Tracko/Board": [
    "Tracko/BoardFactory",
    "Tracko/BoardRenderer",
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/BitmapBin": [
    "Tracko/BoardRenderer",
    "Tracko/Gameplay/Screen",
    "Tracko/PieceRenderer",
    "Tracko/SharedBackground",
    "Tracko/SharedForeground"
  ],
  "AllegroFlare/FontBin": [
    "Tracko/BoardRenderer",
    "Tracko/Gameplay/Screen",
    "Tracko/PieceRenderer",
    "Tracko/SharedBackground",
    "Tracko/SharedForeground",
    "Tracko/Visuals/TrackPath"
  ],
  "ALLEGRO_FONT": [
    "Tracko/BoardRenderer",
    "Tracko/Gameplay/Screen",
    "Tracko/PieceRenderer",
    "Tracko/Visuals/TrackPath"
  ],
  "al_draw_text": [
    "Tracko/BoardRenderer",
    "Tracko/PieceRenderer",
    "Tracko/Visuals/TrackPath"
  ],
  "al_color_name": [
    "Tracko/BoardRenderer",
    "Tracko/PieceRenderer"
  ],
  "al_draw_circle": [
    "Tracko/BoardRenderer"
  ],
  "al_draw_rectangle": [
    "Tracko/BoardRenderer"
  ],
  "al_draw_rounded_rectangle": [
    "Tracko/BoardRenderer",
    "Tracko/PieceRenderer",
    "Tracko/Visuals/TrackPath"
  ],
  "AllegroFlare/Placement2D": [
    "Tracko/BoardRenderer",
    "Tracko/Gameplay/Screen",
    "Tracko/PieceRenderer"
  ],
  "AllegroFlare/Placement3D": [
    "Tracko/BoardRenderer",
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/Vec2D": [
    "Tracko/BoardRenderer",
    "Tracko/PieceRenderer",
    "Tracko/Visuals/TrackPath"
  ],
  "Tracko/PieceRenderer": [
    "Tracko/BoardRenderer",
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/ModelBin": [
    "Tracko/BoardRenderer",
    "Tracko/Gameplay/Screen",
    "Tracko/PieceRenderer"
  ],
  "Tracko/Gameplay/Screen": [
    "Tracko/GameConfigurations/Main",
    "Tracko/GameConfigurations/Main",
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/GameConfigurations/Complete": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/Levels/Base": [
    "Tracko/GameConfigurations/Main",
    "Tracko/Gameplay/Level"
  ],
  "AllegroFlare/DialogTree/NodeBank": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/NodeBankFactory": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/Nodes/Wait": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/Nodes/ExitProgram": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/Nodes/MultipageWithOptions": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/NodeOptions/GoToNode": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/DialogTree/NodeOptions/ExitDialog": [
    "Tracko/GameConfigurations/Main"
  ],
  "Tracko/Gameplay/Level": [
    "Tracko/GameConfigurations/Main",
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/Achievement": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/Elements/StoryboardPages/Base": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/GameSession": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/GameProgressAndStateInfos/Base": [
    "Tracko/GameConfigurations/Main",
    "Tracko/GameProgressAndStateInfo"
  ],
  "AllegroFlare/LoadASavedGame/SaveSlots/Base": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/Screens/Gameplay": [
    "Tracko/GameConfigurations/Main",
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/Runners/Complete": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/AudioController": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/EventNames": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/GameEventDatas/AchievementUnlocked": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/GameEvent": [
    "Tracko/GameConfigurations/Main",
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/Screens/PauseScreen": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/Screens/Subscreen/Screen": [
    "Tracko/GameConfigurations/Main"
  ],
  "Tracko/ForwardDeclarations/Tracko/GameConfigurations/Main": [
    "Tracko/GameConfigurations/Main",
    "Tracko/Gameplay/Screen"
  ],
  "Tracko/ForwardDeclarations/Tracko/Gameplay/Screen": [
    "Tracko/GameConfigurations/Main"
  ],
  "Tracko/SharedBackground": [
    "Tracko/GameConfigurations/Main"
  ],
  "Tracko/SharedForeground": [
    "Tracko/GameConfigurations/Main"
  ],
  "AllegroFlare/Elements/Backgrounds/Base": [
    "Tracko/GameConfigurations/Main",
    "Tracko/SharedBackground",
    "Tracko/SharedForeground"
  ],
  "Tracko/JSONLoaders/Tracko/GameProgressAndStateInfo": [
    "Tracko/GameProgressAndStateInfo"
  ],
  "ALLEGRO_EVENT": [
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/EventEmitter": [
    "Tracko/Gameplay/Screen",
    "Tracko/SharedBackground",
    "Tracko/SharedForeground"
  ],
  "al_is_primitives_addon_initialized": [
    "Tracko/Gameplay/Screen",
    "Tracko/SharedBackground",
    "Tracko/SharedForeground"
  ],
  "AllegroFlare/Player": [
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/VirtualControllers/Base": [
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/VirtualControllers/GenericController": [
    "Tracko/Gameplay/Screen"
  ],
  "Tracko/GameConfigurations/Main": [
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/AssetStudio/Database": [
    "Tracko/Gameplay/Screen"
  ],
  "Tracko/BoardRenderer": [
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/Camera2D": [
    "Tracko/Gameplay/Screen"
  ],
  "AllegroFlare/Camera3D": [
    "Tracko/Gameplay/Screen"
  ],
  "Tracko/BoardFactory": [
    "Tracko/Gameplay/Screen"
  ],
  "al_get_time": [
    "Tracko/Piece"
  ],
  "Tracko/Piece/TileType": [
    "Tracko/Piece",
    "Tracko/PieceRenderer",
    "Tracko/Visuals/TrackPath"
  ],
  "AllegroFlare/Model3D": [
    "Tracko/PieceRenderer"
  ],
  "al_is_font_addon_initialized": [
    "Tracko/SharedBackground",
    "Tracko/SharedForeground"
  ],
  "al_color_html": [
    "Tracko/SharedBackground"
  ],
  "al_draw_filled_rectangle": [
    "Tracko/SharedBackground",
    "Tracko/SharedForeground"
  ],
  "ALLEGRO_COLOR": [
    "Tracko/SharedBackground",
    "Tracko/SharedForeground"
  ],
  "AllegroFlare/Elements/Backgrounds/Parallax": [
    "Tracko/SharedBackground"
  ],
  "AllegroFlare/Elements/Backgrounds/ParallaxLayer": [
    "Tracko/SharedBackground"
  ],
  "AllegroFlare/Shaders/ColorAdjust": [
    "Tracko/SharedBackground"
  ],
  "AllegroFlare/Path2D": [
    "Tracko/Visuals/TrackPath"
  ]
}
</pre>
</body>